// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  phoneNumber    String?   @unique
  hashedPassword String
  googleId       String?   @unique
  role           Role             @default(STUDENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courses        Course[]         @relation("InstructorCourses")
  enrollments    Enrollment[]
  payments       Payment[]
  streamSessions StreamSession[]
  sessions       Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  instructorId String
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  lessons     Lesson[]
  streamSessions StreamSession[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
}

model StreamSession {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  instructorId String
  instructor User    @relation(fields: [instructorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

