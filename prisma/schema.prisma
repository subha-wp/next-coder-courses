// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String?           @unique
  phoneNumber    String?           @unique
  hashedPassword String
  googleId       String?   @unique
  role           Role             @default(STUDENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courses        Course[]         @relation("InstructorCourses")
  enrollments    Enrollment[]
  payments       Payment[]
  streamSessions StreamSession[]
  sessions       Session[]
  streamParticipants StreamParticipant[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String
  thumbnailUrl String?
  price       Float
  hasFreeTrial Boolean     @default(false)
  isFree      Boolean      @default(false)
  instructorId String
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  lessons     Lesson[]
  streamSessions StreamSession[]

  @@index([slug])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  order       Int      @default(1)
  duration    Int?     // Duration in minutes
  isFree      Boolean  @default(false)
  videos      LessonVideo[]
  materials   LessonMaterial[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId, order])
}

model LessonVideo {
  id          String   @id @default(cuid())
  title       String
  url         String
  duration    Int?     // Duration in minutes
  order       Int      @default(1)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([lessonId, order])
}

model LessonMaterial {
  id          String   @id @default(cuid())
  title       String
  type        MaterialType
  url         String
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([lessonId])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  enrollmentType EnrollmentType @default(PAID)
  status      EnrollmentStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enrolledBy  String?  // ID of admin who manually enrolled the user
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model StreamSession {
  id           String   @id @default(cuid())
  instructorId String   // User hosting the session
  courseId     String   // Course associated with the live session
  title        String
  description  String?
  thumbnailUrl String?
  price       Float
  isFree      Boolean      @default(false)
  startTime    DateTime
  endTime      DateTime?
  status       StreamStatus @default(SCHEDULED) // ENUM: SCHEDULED, LIVE, ENDED
  recordingUrl String?  // Link to recorded session (optional)
  
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  participants StreamParticipant[]
}

model StreamParticipant {
  id          String   @id @default(cuid())
  sessionId   String
  userId      String
  joinedAt    DateTime @default(now())
  
  session     StreamSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId]) // Ensures no duplicate participants
}

enum StreamStatus {
  SCHEDULED
  LIVE
  ENDED
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum MaterialType {
  PDF
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  OTHER
}

enum EnrollmentType {
  FREE
  PAID
}

enum EnrollmentStatus {
  ACTIVE
  SUSPENDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}